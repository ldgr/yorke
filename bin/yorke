#!/usr/bin/env python
import argparse
import hashlib
import sys

from yorke import Xor, byte_by_byte, recurrence_relation


def file_xor(args):
    with open(args.left, 'r') as left_fd:
        with open(args.right, 'r') as right_fd:
            sys.stdout.write(Xor.str(Xor.files(left_fd, right_fd)))


def sha256(args):
    x0 = args.x0
    stream_generator = recurrence_relation(lambda x: hashlib.sha256(x).digest())
    try:
        for output in stream_generator(x0):
            sys.stdout.write(output)
    except IOError:
        return


def init_parser():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Subcommand', dest='mode')

    xor_parser = subparsers.add_parser('xor')
    xor_parser.add_argument('left', type=str)
    xor_parser.add_argument('right', nargs='?', type=str, default=None)

    sha256_parser = subparsers.add_parser('sha256')
    sha256_parser.add_argument('x0', type=str)

    return parser


dispatch_table = dict(
    xor=file_xor,
    sha256=sha256,
)

def main():
    parser = init_parser()
    args = parser.parse_args()
    try:
        return dispatch_table[args.mode](args)
    except KeyError:
        print 'Invalid command: {}'.format(args.mode)


if __name__ == '__main__':
    main()
